function Yabu_Settings(e){var n=$.extend({y_author:"John Smith",y_right_sidebar:!1,y_right_logo:!1,y_description:{set:!0,desc:"<p>Hermit Chen</p><p>Portfolio @ rakugaki.me</p><p>Themeforest ID = otakism</p><p>Thank you for previewing my theme.</p>",textalign:"center"},y_social:[{name:"facebook",url:"#"},{name:"twitter",url:"#"},{name:"googleplus",url:"#"},{name:"github",url:"#"},{name:"tumblr",url:"#"},{name:"flickr",url:"#"},{name:"dribbble",url:"#"},{name:"instagram",url:"#"},{name:"linkedin",url:"#"},{name:"pinterest",url:"#"},{name:"qq",url:"#"},{name:"renren",url:"#"},{name:"sina-weibo",url:"#"}]},e);if(n.y_author&&($("#aboutme h1").html(n.y_author),setTimeout(function(){$("#site-name").addClass("show")},10)),n.y_description.set){var i=n.y_description.desc;$("#my-description").css("text-align",n.y_description.textalign),$("#my-description").html(i),setTimeout(function(){$("#my-description").slideDown(200)},200)}n.y_right_sidebar&&$("#sidebar").css({float:"right","margin-right":0}),n.y_right_logo&&$(".logo-positioner").css({float:"right"}),n.y_social.forEach(function(e){var n='<li><a href="'+e.url+'" class="icon-'+e.name+'"></a></li>';$(".snslist").append(n)})}var theme_options={y_author:"John Smith",y_social:[{name:"facebook",url:"#"},{name:"twitter",url:"#"},{name:"googleplus",url:"#"},{name:"github",url:"#"},{name:"tumblr",url:"#"},{name:"flickr",url:"#"},{name:"dribbble",url:"#"},{name:"instagram",url:"#"},{name:"linkedin",url:"#"},{name:"pinterest",url:"#"},{name:"qq",url:"#"},{name:"renren",url:"#"},{name:"sina-weibo",url:"#"}]};!function(e){e(".hide-menu").hide(),e("#readnow").click(function(n){n.preventDefault(),e(".post-list").offset()?e("html,body").animate({scrollTop:e(".post-list").offset().top},500):e(".single").offset()&&e("html,body").animate({scrollTop:e(".single").offset().top},500)}),e(".post-content").fitVids(),e("#toggle-menu").click(function(n){n.preventDefault(),e("#main-menu ul li").slideToggle(200,function(){"none"===e("#main-menu ul li").css("display")?(e("#toggle-menu .show-menu").show(),e("#toggle-menu .hide-menu").hide()):(e("#toggle-menu .show-menu").hide(),e("#toggle-menu .hide-menu").show())})}),window.onresize=function(){e(window).width()>=767&&"none"===e("#main-menu ul li").css("display")&&(e("#main-menu ul li").slideDown(200),e("#toggle-menu .show-menu").hide(),e("#toggle-menu .hide-menu").show())}}(jQuery),function(e){new Yabu_Settings(theme_options)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
